# -*- coding: utf-8 -*-
"""poaching_identifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e3DcOkCr99EV8qwkoJXOeYRtKvul-tnY
"""

!pip install tensorflow numpy scikit-learn Pillow opencv-python

import os
import shutil
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from google.colab import files
import pickle
from IPython.display import Image, display
import io

poaching_dir = "/content/dataset/poaching"
no_poaching_dir = "/content/dataset/no_poaching"

images = []
labels = []

for filename in os.listdir(poaching_dir):
    img_path = os.path.join(poaching_dir, filename)
    try:
        img = load_img(img_path, target_size=(224, 224))
        img_array = img_to_array(img)
        images.append(img_array)
        labels.append(1)
    except Exception as e:
        print(f"Error loading image {filename}: {e}")

for filename in os.listdir(no_poaching_dir):
    img_path = os.path.join(no_poaching_dir, filename)
    try:
        img = load_img(img_path, target_size=(224, 224))
        img_array = img_to_array(img)
        images.append(img_array)
        labels.append(0)
    except Exception as e:
        print(f"Error loading image {filename}: {e}")

images = np.array(images)
labels = np.array(labels)

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow(X_train, y_train, batch_size=32)
test_generator = test_datagen.flow(X_test, y_test, batch_size=32)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

history = model.fit(
    train_generator,
    epochs=10,
    validation_data=test_generator,
    callbacks=[early_stopping]
)

def predict_poaching(image_path):
    try:
        img = load_img(image_path, target_size=(224, 224))
        img_array = img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = img_array / 255.0

        prediction = model.predict(img_array)

        if prediction[0][0] >= 0.5:
            return "Poaching Detected."
        else:
            return "No Poaching Detected."

    except Exception as e:
        return f"Error processing image: {e}"

uploaded = files.upload()
for fn in uploaded.keys():
    prediction = predict_poaching(fn)
    print(f"Image: {fn}")
    print(f"Prediction: {prediction}")

    try:
        display(Image(fn))
    except FileNotFoundError:
        print(f"Error: Could not display image {fn}")
    except Exception as e:
        print(f"An error occurred while displaying the image: {e}")