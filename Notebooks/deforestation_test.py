# -*- coding: utf-8 -*-
"""deforestation_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17o-jOC-CVBW776c4_-MM9OpuSIfL1g_A
"""

!pip install tensorflow Pillow

import tensorflow as tf
from tensorflow import keras
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

model_path = "/content/deforestation_classifier.h5"

try:
    model = keras.models.load_model(model_path)
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

except Exception as e:
    print(f"Error loading model: {e}")
    exit()

img_height, img_width = 128, 128

def preprocess_image(img_path):
    try:
        img = Image.open(img_path).convert('RGB')
        img = img.resize((img_height, img_width))
        img_array = np.array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        return img_array
    except Exception as e:
        print(f"Error processing image: {e}")
        return None

def predict_deforestation(image_path):
    img_array = preprocess_image(image_path)
    if img_array is None:
        return None

    prediction = model.predict(img_array)

    if prediction[0][0] >= 0.5:
        return "Deforestation Detected"
    else:
        return "No Deforestation Detected"

uploaded = files.upload()

for fn in uploaded.keys():
    image_path = fn
    try:
        result = predict_deforestation(image_path)

        if result:
            print(f"Image: {fn}")
            print(f"Prediction: {result}")

            img = Image.open(image_path)
            plt.imshow(img)
            plt.axis('off')
            plt.show()
        else:
            print("Could not process uploaded file")
    except Exception as e:
        print(f"An error occurred: {e}")